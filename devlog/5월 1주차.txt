# 5월 5일 이전까지

프로젝트 구상과 생성은 대략 4월 말이었다. 하지만 그때는 inflearn에서 김영한 님의 스프링 완전 정복 로드맵을 수강하느라 프로젝트를 제대로 시작할 시간이 없었다.

현재 기획한 프로젝트는 개인학원 선생님들이 편리하게 사용할 수 있는 영어학습 사이트이다.
기획하게 된 계기는 다음 3가지와 같다.

1. 이전 직장이었던 영어학원에서 이용했던 영어 학습 사이트처럼 만들려고 한다. 왜냐하면 영어학원에서 회계(+a)를 담당했기 때문에 그 사이트가 어떤 컨텐츠를 만들어서 얼마나 수익을 버는지를 대략이나마 알고 있기 때문이다. 즉, 나도 그런 걸 만들면 수익을 낼 자격 정도는 되지 않겠나. 물론 서비스 운영은 별도이고, 백엔드 개발자로서 해야 할 만큼만 할 생각이다.
클론 프로젝트는 아니고, 취업도 해야 해서 마냥 시간을 투자할 수는 없기에 좀 더 경량화된 사이트를 만들려고 한다.

2. 수작업과 인력으로 학원을 운영하고 있는 개인학원 선생님들에게 무료로 웹 서비스를 제공하려고 한다. 이직 후 6개월 동안 아르바이트로 일했던 다른 영어학원은 원장님이 정말 좋은 분이셨다. 실력적으로 최고는 아니지만 인품으로서는 최고가 아니신가 싶었다.
아르바이트를 하면서 안타까웠던 부분은 중학생 내신 대비 교과서 학습을 모두 직접 하고 있었다는 점이다. 예를 들어, 선생님이 직접 단어를 부르면 학생이 빈 종이에 뜻을 적곤 했다. 교과서 학습과 단어 학습만이라도 웹 사이트를 사용하면 수고가 좀 더 적어질 텐데... 물론 수작업에도 장점은 있다. 무엇보다도 학생들을 직접 감시할 수 있으니까.
아무튼 그런 개인학원 선생님들이 무료로, 콘텐츠는 적더라도 간편하게 사용할 수 있는 웹 사이트를 만들 계획이다.

3. 이제는 나도 스프링을 좀 써보고 싶다. 3월 말까지 Korea IT 아카데미에서 국비수업을 들었는데, 체감상 두 달 정도는 JDBC Driver와 JSP를 사용한 수업이었다. 학생들의 요청이 많아지자 스프링 수업을 조금 하기는 했는데, 지금 다시 평가해봐도 그다지 유익한 내용은 아니었다. 아무튼 그런 환경에서 나는 나대로 공부도 하면서, 팀 프로젝트의 팀장도 맡았기 때문에 스프링 프로젝트를 할 시간이 없었다.
팀 프로젝트는, 물론 모두가 모든 영역을 작업하긴 했지만, 비유하자면 웹 디자이너 1명, 프론트 개발자 1명, 백엔드 개발자 1명, 그리고 나 이렇게 4명으로 구성되어 있었는데, 백엔드 개발자가 조기취업을 하면서 할 일이 엄청 많아졌다.
결국 2월 중순부터는 거의 팀 프로젝트만 하면서 스프링 공부도 손을 놓게 되었다. 인프런 대시보드를 보니까 2월 말부터 4월 말까지 약 2달 동안 학습기록이 없다. 3월은 팀 프로젝트를 해야 했고, 4월은 정보처리기사 시험 공부를 해야 했기 때문에. 다행히 정보처리기사 실기는 가채점 결과 85점 미만으로 넉넉하게 합격한 덕분에 이후에는 스프링 공부에만 집중할 수 있었다.
아무튼 스프링을 배웠으니까 쓴다는 느낌도 있지만, 더욱 중요한 것은 servlet, JSP를 사용했던 팀 프로젝트에서 겪은 고생을 다시는 겪지 않으려고 쓰려는 것이다. 팀 프로젝트의 구조가 완전 빵점은 아니었지만 많은 부분에서 바람직한 객체 지향 설계를 이루지 못 했다.
(여기서부터는 잠시 반성 겸 이전 프로젝트에 대한 이야기이다)
어차피 기술 변동도 없었고, 스프링을 쓴 것도 아니니까 의존성에 대한 부분은 잠시 밀어놓더라도, 서버 유효성 검사, 예외처리, service 계층의 외부 의존도와 과중 책임, 메시지 기능 미사용 등 제대로 해내지 못 한 부분이 많다.
국비학원에서는 javascript로, 그것도 일일이 손으로 유효성 검사를 하는 방법만 가르쳐줬다. 물론 서버 유효성 검사를 안 할 수는 없어서 어설프게나마 하긴 했지만, 코드가 무척 지저분하다. 게다가 유효성 검사를 서비스 계층에서 하고 있다. 팀원들과 의사소통을 위해서 서비스 계층이라고 명명했지 사실상 컨트롤러 계층이다.
예외처리 같은 경우 아는 지식이 하나도 없어서 그냥 RuntimeException을 던지고, 프론트 컨트롤러에서 Exception으로 전부 잡아서 예외 페이지로 리다이렉트했다.
되돌아보면 효과적인 방법을 몰랐을 뿐이지 어설프게나마 할 건 다 하기는 했다. 나 혼자서 코드 하나하나마다 그 삽질을 하고 있으니 당연히 시간이 많이 걸릴 수 밖에 없었다. 이번에는 그 수고를 겪지 않고 스프링 로드맵에서 배운 것들은 모두 써먹을 생각이다. 강의에서 내가 너무나도 고통 받았던 부분들을 정말 시원하게 해결해줬다.

반성이 길었지만 아무튼 5월 5일에 스프링 로드맵의 데이터베이스 1편까지 수강이 끝났다. 그 동안 강의 듣기 지칠 때마다 쉬는 동안에 클라이언트 요구사항을 정리하고, 데이터베이스를 설계하고, JPA 독학을 했다. 그리고 5월 5일부터 본격적으로 프로젝트 작업에 들어갔다.

---

# 5월 5일

JPA 이론 교재와 ChatGPT, 블로그를 참고하면서 이때까지 틈틈이 만들어뒀던 Domain과 Repository를 개선했다.

1. 다대일 양방향 매핑을 알게 되었다. 이전에는 다대일 단방향 매핑만 했었다. 처음에는 Entity의 필드와 Table의 컬럼이 같아야 한다고 생각했는데, 잘 생각해보니까 그럴 필요가 없었다. JPA를 표준 ORM임을 기억하고 Java의 패러다임에 맞게 개발할 필요가 있다.

2. 테스트 코드에서 매번 Teacher부터 시작해서 Student, Book, Word 등등 만드려고 하니 반복되는 코드가 너무 많다. 이때까지 배운 내용은 @Test를 달아준 메소드 안에서 매번 객체를 생성했는데, 그러기엔 반복이 너무 많고, 더미 데이터를 만드려고 하니 테스트의 일관성을 지킬 수 없고, @BeforeAll은 static이라서 interface인 JPA Repository로 더미 데이터를 만들 수도 없고... 고민하던 차에 구글에 검색해보니 .sql 파일을 만들고, @Sql annotation으로 더미데이터를 사전에 만들어두는 방법이 있었다. 방법은 알았으니 사용은 내일 하기로 했다.

3. 더미데이터 만드는 건 잠시 미루어두고 기초 공부를 좀 했다. stream, lambda, Optional에 대한 것들을 이때까지는 크게 신경 쓰지 않았는데, 이제는 이런 문법도 좀 공부를 해서 사용할 필요가 생겼다. 스프링 데이터 JPA가 return 값으로 Optional을 사용하기 때문이다.
stream이랑 lambda는 처음 써보지만 몇 번 써보니까 대충 알 것 같았다. 근데 Optional 공부가 굉장히 난감했다.

(1) Optional은 왜 쓰는가?
-> 결론적으로 별 거 없었다. DB를 조회했는데, '결과가 없으면' null을 반환하게 된다. 그러면 NPE라는 무서운 존재를 만나게 된다. 따라서 null을 반환하는 대신 '결과 없음'으로 반환해야 한다. 그런데 이걸 if로 쓰면 코드가 위아래로 두꺼워지니까 좀 더 짧게 쓰는 게 Optional이다.
참고로, NPE가 무서운 이유는, 'null을 가리키고 있다'는 사실은 개발자가 알아도 원인을 제대로 규명하기 어려운 오류이기 때문이다. 반면에 '결과 없음'이라는 오류는 개발자가 논리적으로 이해하고 적절한 처리를 할 수 있다.

(2) Optional은 어떻게 쓰는가?
References를 읽으면서 내린 결론은 orElseGet, orElseThrow를 쓰는 것이다. orElseGet을 쓰면 필드의 값이 null인 빈 객체를 반환하고, orElseThrow를 쓰면 NPE 대신 IllegalArgumentException이나 NoSuchElementException을 던질 수 있다.

(3) Optional을 받아서 어떻게 써야 하는가?
orElseGet으로 빈 객체를 받아서 사용자에게 그대로 속이 비어있는 Model을 보여주거나, Controller에서 Exception을 처리하면 된다.

---

# 5월 6일

1. 어제 하던 더미 데이터 만들기를 이어서 했다. sql 파일을 만들고, @Sql annotation으로 테스트할 때만 사전에 데이터를 만들 수 있었다.

2. Repository 테스트를 완료했다. Jpa의 save나 delete 등은 내가 제대로 사용할 수 있음을 확인했으니(JpaStudyTest 사용) 중복되는 테스트는 제외하고 클라이언트 요구사항을 만족하기 위해 필요한 기능들만 테스트를 수행했다. 처음에는 사용자가 teacher와 student 뿐이라서 테스트 파일이 2개만 생겼는데, 이후에 Repository에 의존하는지를 기준으로 나누어 다음과 같이 총 4개의 테스트 파일을 만들었다.

(1) TeacherRepositoryTest
(2) StudentRepositoryTest
(3) BookRepositoryTest
(4) ScoreRepositoryTest

이외의 Table들은 관계 테이블이거나 Book에 의해서만 접근되는 Table이라서 굳이 Repository 테스트가 필요하진 않았다.

3. 요구사항을 개선하고 Entity를 보완했다. 예를 들어 Score 엔티티에 기존에는 없었던 submit_date를 추가하는 식으로 대대적인 변동은 없었고, 말 그대로 보완 정도만 있었다. 하지만 domain이 변경되었으니 RepositoryTest도 다시 돌려야 하는데... 처음에는 하기 싫어서 끙끙댔지만 의외로 10분 정도 밖에 안 걸렸다. 한 번 성공한 테스트라서 그런지 그다지 변경할 내용이 없었다.

4. Service 계층을 만들기 시작했다. Service 계층을 제대로 만들기는 처음이라서 고민했는데, 내 나름대로 정리를 하면서 오늘은 TeacherService와 StudentService 2개 정도만 만들었다.
참고로 정리한 내용이란 다음과 같다.

Repository의 역할
(1) DB 접근 -> 내가 직접 구현
(2) 예외 추상화 및 던지기 -> spring(이 기본 제공)

Service의 역할
(1) 비즈니스 로직 처리 -> 내가 직접 구현.
(2) 트랜잭션 보장 -> spring

Controller의 역할
(1) DTO와 Entity 매핑 -> 내가 직접 구현.
(2) 예외처리 -> spring
(3) 유효성 검사 -> spring
(4) View 반환 -> spring
(5) Model 반환 -> spring
(6) Http parameter, attribute 매핑 -> spring

이렇게 보니 Controller가 해야 할 일이 참 많긴 하다.
여기서 참고할 내용은 2가지이다.

(1) DTO(또는 Form)와 Entity 매핑을 Controller에서 해서 Service 계층을 최대한 분리시킬 계획이다. DTO와 Entity 매핑을 어디서 하는지에 따라 장단점이 있지만, 나는 일단 Service 계층이 더 아래 계층인 Entity와 Repository만을 사용하고, 더 윗 계층인 Controller 계층의 객체들은 모르게 할 생각이다. 즉, 의존하지 않게 만들 것이다.

(2) 각 계층의 역할을 정리하다가 눈치챈 것인데, JpaRepository만을 extends한 TeacherRepository는 기술 변경이 있을 때 스프링 빈을 바꾸는 게 아니라 서비스 계층 자체의 내용을 바꿔야 한다.
처음에는 아래와 같이 만들었는데, 저렇게 하니까 내가 만든 Repository와 CrudRepository가 충돌해서 사용할 수 없게 된다.

JpaTeacherRepository extends JpaRepository<Teacher, Long>, TeacherRepository

그래서 다른 블로그들을 보니까 위의 방식에서 TeacherRepository를 빼고 JpaRepository에만 의존을 하길래 나도 그렇게 했는데, Service 계층을 작업하다 보니 OCP가 지켜지지 않고 있다는 사실을 깨달았다.
근데 블로그에도 관련된 내용이 없고, ChatGPT도 엉뚱한 소리만 내놓고 있다. 결국 인프런 질문 게시판에 문의를 넣었고, 답변이 올라오기 전까지는 이전까지 하던 작업 방식대로 계속 할 생각이다.