
# 5월 8일

오늘은 프로젝트 진도는 거의 나가지 않았다.
1. JPA에서 Entity 매핑에 대해 좀 더 공부했다.
2. 취업학원에서 자기소개서 첨삭본을 보내와서 읽어봤다.

---

# 5월 9일

오늘은 서비스 계층을 작업하고, 특히 ChatGPT로 학생이 영어 시험을 보는 비즈니스 로직을 구현했다.
그외에도 Entity 중에서 Word와 Sentence를 Content라는 하나의 Entity로 통일했다.
이전에도 언급한 것처럼 서비스 계층에서는 외부 라이브러리에 의존하지 않도록 주의해야 한다.

---

# 5월 10일

1. 이전까지 산발적으로 기록했던 메모를 정리했다.

2. 이전부터 계속 고민했던 내용인데, 내가 만들고 있는 로직에서는 학생이 가질 수 있는 권한이 매우 한정적이다. 학생은 로그인, 교재 목록 조회, 시험 진행 및 결과 저장, 성적 조회 등 시험을 제외한 모든 경우에 조회 기능만을 수행하게 된다. 생성, 수정, 삭제 등은 선생님이 직접 조작해야 한다.
이에 대해 ISP를 적용하여 StudentService interface를 더 상세하게 나눌지, 아니면 중복되는 내용이 있더라도 StudentService와 TeacherStudentService처럼 나눌지 고민했는데, 결과적으로 후자의 방법을 적용하게 되었다.
이후 유지보수, 변경 측면에서는 불리하지만 당장의 개발규모와 속도를 고려했을 때 후자가 더 유리하다는 판단 때문이었다.

3. 저번 주에 올린 인프런 질문에 대한 답변을 받지 못 했다. 무료강의에 질문을 달아서 그런지, 서포터즈와 김영한 님이 바빠서인지는 모르지만, 아무튼 마냥 기다릴 수만은 없어서, 직접 김영한 님의 references를 직접 뒤져봤다.
그 결과 Spring Data JPA를 사용할 때는 Spring Data JPA에만 의존해야 한다는 결론이 나왔다. 강의자료나 책에서도 Repository가 JpaRepository에만 단일로 extends를 하고 있었으며, Service 계층에서 해당 Repository를 직접 가져다 써야 했다.
JpaRepository는 CrudRepository를 참조하고 있으니, 즉 기본적인 Repository 기능을 갖춘 인터페이스를 사용할 수 있으니 충분히 개발이 가능하다. 만약 요구사항의 변경이 발생할 수 있거나, 필요하다면 JpaRepository를 extends한 Repository를 다시 extends하여 새로운 Repository를 만들면 나름대로 OCP는 지킬 수 있을 것이다. 이 경우에도 JpaRepository에는 무조건 의존하게 되지만, 이는 트레이드 오프라고 생각해야겠다.

4. Service 계층 Test를 할 때, deleteTest를 하면서 n + 1 문제가 발생했다.
n + 1 문제는 내가 요청한 1개의 퀴리 이외에 n개의 불필요한 쿼리가 추가로 발생하는 현상이다. 주로 JPA 레벨에서 참조되는 테이블에 대해 영속성 관리를 하고, 외래 참조를 하고 있는 연관 테이블까지 JPA에서 영속성 관리를 하게 되면, 참조되는 테이블의 List에서 하나씩 값을 가져와서 삭제하기 때문이다.
추상적으로 설명했는데, 정리하자면 다음과 같다.

(1) teacher가 3개의 book을 등록했고, 각각의 book은 30개의 content를 가지고 있다.
(2) Teacher Entity 클래스 필드로 @OneToMany를 하게 되면, Book을 가지고 있는 리스트에는 3개의 인스턴스가 담기게 된다. 마찬가지로 각각의 Book에도 30개의 Content 인스턴스가 담겨 있다.
(3) 이때, @OneToMany를 CascadeType.REMOVE를 하면 JPA 레벨에서 리스트 안에 담겨있는 인스턴스를 "하나씩" 삭제한다.
(4) teacher를 삭제하면, 먼저 Book 리스트를 SELECT하고, 또 Book에서 Content 리스트를 SELECT한다. 그리고 전체 contents Table에서 Book이 가지고 있는 Content Id를 "하나씩" 삭제한다. 즉, 하나의 Book마다 30번의 delete 쿼리를 발생시킨다. 마치 반복문 안에서 delete 쿼리를 실행하는 것과 같다.
(5) 결과적으로 teacher를 삭제하면 100개가 넘는 쿼리가 발생한다.

처음에는 teacher를 delete하면, 나는 scores, content_wrong, contents, books, students, teachers를 한 번씩 삭제하는 6개의 쿼리가 발생하기를 기대했는데, 수백 개의 쿼리가 발생했다. 만약 contents의 단어 또는 문장이 book 1개당 100개가 있다면 최소한 n * 100개의 쿼리가 발생할 것이다.
블로그를 뒤져본 결과, 대부분의 경우 delete 메소드를 직접 정의하여 삭제하고 있었다. 보통 내신시험 1번만 하더라도 단어와 문장이 몇 백개는 달린다는 사실을 잘 알고 있기 때문에, 나도 delete 메소드를 직접 정의해야 할 것 같았다.

근데 사실 JPA에서 나머지 scores, contents 등을 삭제할 이유가 없다. DDL로 처음 테이블을 생성할 때 ON DELETE CASCADE를 만들면, 나는 말 그대로 'delete from teachers ...' 쿼리 단 1개만 날리면 되니까.
그리고 MariaDB는 ON DELETE CASCADE와 ON UPDATE CASCADE를 모두 지원하고 있다. 내가 직접 DDL을 작성해서 테이블을 만들까...생각하고 있던 차에 @OnDelete annoatation을 알게 되었다. @OnDelete를 @ManyToOne에 등록하면 테이블을 처음 만들 때 ON DELETE CASCADE 제약조건을 생성한다고 한다.
근데 사실 이왕 MariaDB 쓰는 거 ON UPDATE CASCADE까지 쓰면 좋지 않을까, 결국 서비스 배포할 때는 내가 직접 테이블을 따로 만들어야겠다, 생각했는데 어차피 각 테이블을 외래키로 불변하는 id 컬럼을 모두 참조하고 있었기 때문에 id가 UPDATE될 일이 없다!
물론 배포할 때는 내가 직접 테이블을 만들 생각이긴 하지만, 일단 현재로서는 @OnDelete annoatation을 사용하는 것으로 필요한 기능은 충분히 구현할 수 있을 것 같다.

그 결과 다음과 같이 Entity가 변경되었다.

@OneToMany(mappedBy = "teacher", cascade = CascadeType.ALL, orphanRemoval = true)
 -> @OneToMany(mappedBy = "teacher", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH})

@ManyToOne
 -> @ManyToOne과 함께 @OnDelete를 달아주었다.

CascadeType도 처음에는 없앴는데, 생각해보니 그렇게 하면 teacher를 통해서 students를 불러올 수가 없었고, 그렇다고 CascadeType.ALL을 하면 다시 JPA 레벨에서 delete를 수행한다. 그 결과 위와 같이 CascadeType에서 REMOVE를 제외한 나머지를 모두 배열로 넣게 되었다. 나중에 또 무슨 문제가 생긴다면 불필요한 CascadeType은 삭제하고, 수정할 생각이다.

이후 다시 테스트를 돌려본 결과, 불필요한 SELECT, UPDATE 쿼리가 발생하지 않았고, DELETE 쿼리는 단 1개만 발생한 것을 확인했다. 그리고 teacher를 통해서 student를 불러오거나, teacher의 student list에 저장해도 DB에 반영되는 등 내가 원하는 기능이 구현되었음을 확인했다.

5. 이후로 Service 계층의 구현과 테스트를 진행했다.

---

# 5월 11일

1. Service 테스트를 모두 완료했다.
테스트를 하면서 핵심 로직 중 하나인 시험보기 로직을 수정했다. 시험보기 로직은 거의 대부분 ChatGPT에게 만들도록 시켰는데, 역시나 한 번에 성공하진 않는다.
시험 채점 로직은 약 6가지의 작은 로직으로 구성이 되는데, 이 6가지가 시험 채점이라는 한 가지 목표를 향해서 일관된 맥락을 가지고 수행되어야 한다. 근데 ChatGPT가 만들어준 로직은 하나 하나는 정상적인 로직이지만 이 6가지가 상통하는 맥락을 갖추진 못 했다. 그래서 코드 중간중간마다 서로 일관된 기능을 수행하도록 코드를 수정했다.

2. Controller 작업을 시작을 해야 하는데, 복습하고 설계할 부분이 생각보다 많다.
일단 간단하게 validation을 적용한 HTTP API 하나만 만들고 테스트를 끝냈다.
그리고 하는 김에 메시지 기능도 좀 적용을 해보려고 하는데, 의외로 메시지 하나하나 설정하는 게 까다롭다. 구체적으로는, 검증도 되고 메시지도 되는데 검증과 메시지를 함께 쓰려고 하니까 좀 까다로운 것 같다.

지금 내가 필요로 하는 것은 검증 오류가 발생하면 properties에서 오류 메시지를 가져와서 json으로 반환하는 것인데, 되짚어보니 properties에서 메시지를 binding해서 타임리프로 렌더링하는 방식을 배워서 나한테 맞게 구현하려면 좀 더 공부가 필요할 것 같다.